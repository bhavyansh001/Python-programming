Within a module, the module’s name (as a string) is available as the value of the global variable __name__.

fibo.fib(1000)                        Calling the fib function of fibo.py
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
fibo.fib2(100)
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
fibo.__name__
'fibo'

If you intend to use a function often you can assign it to a local name:
fib = fibo.fib
fib(500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377

A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement (They are also run if the file is executed as a script.)
The above statement means that the executable statements in a module are intended to initialize the module. These statements may define global variables, set configuration options, or perform other initialization tasks. They are executed only the first time the module name is encountered in an import statement. This means that if a module is imported multiple times in a program, its executable statements will only be executed the first time it is imported.
Additionally, if the module file is executed as a script, its executable statements will also be run at that time. This allows a module to be used both as a library and as a standalone program.

Each module has its own private namespace, which is used as the global namespace by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, modname.itemname.

Modules can import other modules. It is customary but not required to place all import statements at the beginning of a module (or script, for that matter). The imported module names, if placed at the top level of a module (outside any functions or classes), are added to the module’s global namespace.

There is a variant of the import statement that imports names from a module directly into the importing module’s namespace. For example:

from fibo import fib, fib2
fib(500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
This does not introduce the module name from which the imports are taken in the local namespace (so in the example, fibo is not defined).

There is even a variant to import all names that a module defines:

from fibo import *
fib(500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
This imports all names except those beginning with an underscore (_). In most cases Python programmers do not use this facility since it introduces an unknown set of names into the interpreter, possibly hiding some things you have already defined.


import fibo as fib
fib.fib(500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
This is effectively importing the module in the same way that import fibo will do, with the only difference of it being available as fib.
It can also be used when utilising from with similar effects:

from fibo import fib as fibonacci
fibonacci(500)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377
Note For efficiency reasons, each module is only imported once per interpreter session. Therefore, if you change your modules, you must restart the interpreter – or, if it’s just one module you want to test interactively, use importlib.reload(), e.g. import importlib; importlib.reload(modulename).

**Executing modules as scripts
python fibo.py <arguments>
the code in the module will be executed, just as if you imported it, but with the __name__ set to "__main__". That means that by adding this code at the end of your module:

if __name__ == "__main__":
    import sys
    fib(int(sys.argv[1]))
you can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the “main” file:

python fibo.py 50
0 1 1 2 3 5 8 13 21 34
If the module is imported, the code is not run:

import fibo

This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).

The Module Search Path
When a module named spam is imported, the interpreter first searches for a built-in module with that name. These module names are listed in sys.builtin_module_names. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path.

To speed up loading modules, Python caches the compiled version of each module in the __pycache__
The compiled modules are platform-independent, so the same library can be shared among systems with different architectures.

    import sys
sys.ps1
'>>> '
sys.ps2
'... '
sys.ps1 = 'C> '
C> print('Yuck!')
Yuck!
C>

The variable sys.path is a list of strings that determines the interpreter’s search path for modules. 
import sys
sys.path.append('/ufs/guido/lib/python')

dir() function
The built-in function dir() is used to find out which names a module defines. It returns a sorted list of strings:

import fibo, sys
dir(fibo)
['__name__', 'fib', 'fib2']
dir(sys)  
['__breakpointhook__', '__displayhook__', '__doc__', '__excepthook__',
 '__interactivehook__', '__loader__', '__name__', '__package__', '__spec__',
 '__stderr__', '__stdin__', '__stdout__', '__unraisablehook__',
 '_clear_type_cache', '_current_frames', '_debugmallocstats', '_framework',
 '_getframe', '_git', '_home', '_xoptions', 'abiflags', 'addaudithook',
 'api_version', 'argv', 'audit', 'base_exec_prefix', 'base_prefix',
 'breakpointhook', 'builtin_module_names', 'byteorder', 'call_tracing',
 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_info',
 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info',
 'float_repr_style', 'get_asyncgen_hooks', 'get_coroutine_origin_tracking_depth',
 'getallocatedblocks', 'getdefaultencoding', 'getdlopenflags',
 'getfilesystemencodeerrors', 'getfilesystemencoding', 'getprofile',
 'getrecursionlimit', 'getrefcount', 'getsizeof', 'getswitchinterval',
 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',
 'intern', 'is_finalizing', 'last_traceback', 'last_type', 'last_value',
 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks',
 'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'pycache_prefix',
 'set_asyncgen_hooks', 'set_coroutine_origin_tracking_depth', 'setdlopenflags',
 'setprofile', 'setrecursionlimit', 'setswitchinterval', 'settrace', 'stderr',
 'stdin', 'stdout', 'thread_info', 'unraisablehook', 'version', 'version_info',
 'warnoptions']
Without arguments, dir() lists the names you have defined currently:

a = [1, 2, 3, 4, 5]
import fibo
fib = fibo.fib
dir()
['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']
Note that it lists all types of names: variables, modules, functions, etc.

dir() does not list the names of built-in functions and variables. If you want a list of those, they are defined in the standard module builtins:

import builtins
dir(builtins)

Packages: Collection of modules

Just like the use of modules saves the authors of different modules from having to worry about each other’s global variable names, the use of dotted module names saves the authors of multi-module packages like NumPy or Pillow from having to worry about each other's module names. 
Simplified: 
 When a module is imported, its namespace is isolated from the importing module's namespace, so the importing module doesn't have to worry about conflicts with the imported module's global variable names.

Users of the package can import individual modules from the package, for example:
import sound.effects.echo
An alternative way of importing the submodule is:
from sound.effects import echo
Yet another variation is to import the desired function or variable directly:
from sound.effects.echo import echofilter

The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it. If it fails to find it, an ImportError exception is raised. Contrarily, when using syntax like import item.subitem.subsubitem, each item except for the last must be a package; the last item can be a module or a package but can’t be a class or function or variable defined in the previous item.

Importing all from a package

For example, the file sound/effects/__init__.py could contain the following code:
__all__ = ["echo", "surround", "reverse"]
This would mean that from sound.effects import * would import the three named submodules of the sound.effects package.
If __all__ is not defined, the statement from sound.effects import * does not import all submodules from the package sound.effects into the current namespace; it only ensures that the package sound.effects has been imported (possibly running any initialization code in __init__.py) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by __init__.py. It also includes any submodules of the package that were explicitly loaded by previous import statements.

Intrapackage refernces
from . import echo
from .. import formats
from ..filters import equalizer
Note that relative imports are based on the name of the current module. Since the name of the main module is always "__main__", modules intended for use as the main module of a Python application must always use absolute imports.

__main__ module is executed directly with the python command.

In Python, a package is a way of organizing related modules and sub-packages into a single namespace. A package is simply a directory that contains a special file called `__init__.py`. The `__init__.py` file is executed when the package is imported, and it can contain initialization code, such as importing sub-modules or setting up package-level variables.

The `__path__` attribute is a special attribute that is supported by packages. This attribute is a list that contains the name of the directory holding the package's `__init__.py` file before the code in that file is executed. By default, this list contains only the name of the directory containing the `__init__.py` file.

However, this list can be modified to add additional directories to the package's search path. When Python looks for a module or sub-package in a package, it searches the directories in the `__path__` list in the order in which they appear. This means that modifying the `__path__` list can affect future searches for modules and sub-packages contained in the package.

For example, suppose we have a package called `mypackage`, and its directory structure looks like this:

```
mypackage/
    __init__.py
    module1.py
    subpackage/
        __init__.py
        module2.py
```

By default, the `__path__` list for `mypackage` will contain only the name of the `mypackage` directory. However, we can modify this list to add additional directories to the search path. For example, we can add a directory called `other_modules` to the `__path__` list like this:

```python
import mypackage
mypackage.__path__.append('/path/to/other_modules')
```

Now, when Python searches for modules or sub-packages within `mypackage`, it will also search for them in the `other_modules` directory.

In summary, the `__path__` attribute of a package is a list that contains the name of the directory holding the package's `__init__.py` file before the code in that file is executed. Modifying this list can affect future searches for modules and sub-packages contained in the package, allowing for more flexible and dynamic package structures.